{"ast":null,"code":"import _classCallCheck from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/joga/Documents/Pooja/reddit-replica/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { selectSubreddit, selectSort, fetchPostsIfNeeded, invalidateSubreddit } from '../actions/actions';\nimport Header from '../components/Header';\nimport Posts from '../containers/Posts';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.handleMenuChange = _this.handleMenuChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      selected: '/best'\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          dispatch = _this$props.dispatch,\n          selectedSubreddit = _this$props.selectedSubreddit;\n      dispatch(fetchPostsIfNeeded(selectedSubreddit));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$props2 = this.props,\n          dispatch = _this$props2.dispatch,\n          selectedSubreddit = _this$props2.selectedSubreddit;\n      console.log('selected subreddit: ' + selectedSubreddit);\n\n      window.onpopstate = function (e) {\n        window.location.reload();\n      };\n    }\n  }, {\n    key: \"handleMenuChange\",\n    value: function handleMenuChange(subreddit, sort) {\n      var sub = subreddit.replace(/ /g, '');\n      this.props.dispatch(selectSubreddit(sub));\n      this.props.dispatch(selectSort(sort));\n      this.props.dispatch(fetchPostsIfNeeded(sub, sort));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          selectedSubreddit = _this$props3.selectedSubreddit,\n          posts = _this$props3.posts,\n          isFetching = _this$props3.isFetching;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Header, {\n        selectedSub: selectedSubreddit,\n        handleMenuChange: this.handleMenuChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), posts.length > 0 && React.createElement(Posts, {\n        posts: posts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nfunction mapStateToProps(state) {\n  var selectedSubreddit = state.selectedSubreddit,\n      postsBySubreddit = state.postsBySubreddit;\n\n  var _ref = postsBySubreddit[selectedSubreddit] || {\n    isFetching: true,\n    items: []\n  },\n      isFetching = _ref.isFetching,\n      posts = _ref.items;\n\n  return {\n    selectedSubreddit: selectedSubreddit,\n    posts: posts,\n    isFetching: isFetching\n  };\n}\n\nexport default connect(mapStateToProps)(App);","map":{"version":3,"sources":["/Users/joga/Documents/Pooja/reddit-replica/src/containers/App.js"],"names":["React","Component","connect","selectSubreddit","selectSort","fetchPostsIfNeeded","invalidateSubreddit","Header","Posts","App","props","handleMenuChange","bind","state","selected","dispatch","selectedSubreddit","console","log","window","onpopstate","e","location","reload","subreddit","sort","sub","replace","posts","isFetching","length","mapStateToProps","postsBySubreddit","items"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SACIC,eADJ,EAEIC,UAFJ,EAGIC,kBAHJ,EAIIC,mBAJJ,QAKO,oBALP;AAOA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;IAGMC,G;;;;;AACF,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;AAEA,UAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBC,IAAtB,uDAAxB;AACA,UAAKC,KAAL,GAAY;AACVC,MAAAA,QAAQ,EAAE;AADA,KAAZ;AAJe;AAOlB;;;;wCAEmB;AAAA,wBACwB,KAAKJ,KAD7B;AAAA,UACRK,QADQ,eACRA,QADQ;AAAA,UACEC,iBADF,eACEA,iBADF;AAEhBD,MAAAA,QAAQ,CAACV,kBAAkB,CAACW,iBAAD,CAAnB,CAAR;AACH;;;yCAEmB;AAAA,yBACsB,KAAKN,KAD3B;AAAA,UACVK,QADU,gBACVA,QADU;AAAA,UACAC,iBADA,gBACAA,iBADA;AAElBC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAuBF,iBAAnC;;AACAG,MAAAA,MAAM,CAACC,UAAP,GAAqB,UAACC,CAAD,EAAO;AAC1BF,QAAAA,MAAM,CAACG,QAAP,CAAgBC,MAAhB;AACD,OAFD;AAGD;;;qCAEgBC,S,EAAUC,I,EAAM;AAC7B,UAAMC,GAAG,GAAGF,SAAS,CAACG,OAAV,CAAkB,IAAlB,EAAwB,EAAxB,CAAZ;AACA,WAAKjB,KAAL,CAAWK,QAAX,CAAoBZ,eAAe,CAACuB,GAAD,CAAnC;AACA,WAAKhB,KAAL,CAAWK,QAAX,CAAoBX,UAAU,CAACqB,IAAD,CAA9B;AACA,WAAKf,KAAL,CAAWK,QAAX,CAAoBV,kBAAkB,CAACqB,GAAD,EAAKD,IAAL,CAAtC;AACH;;;6BAEQ;AAAA,yBAC4C,KAAKf,KADjD;AAAA,UACGM,iBADH,gBACGA,iBADH;AAAA,UACsBY,KADtB,gBACsBA,KADtB;AAAA,UAC6BC,UAD7B,gBAC6BA,UAD7B;AAGL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,WAAW,EAAEb,iBAArB;AACI,QAAA,gBAAgB,EAAE,KAAKL,gBAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAIKiB,KAAK,CAACE,MAAN,GAAe,CAAf,IACG,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEF,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALR,CADJ;AAUH;;;;EA3Ca3B,S;;AA8ClB,SAAS8B,eAAT,CAAyBlB,KAAzB,EAAgC;AAAA,MACpBG,iBADoB,GACoBH,KADpB,CACpBG,iBADoB;AAAA,MACDgB,gBADC,GACoBnB,KADpB,CACDmB,gBADC;;AAAA,aAESA,gBAAgB,CAAChB,iBAAD,CAAhB,IAAuC;AAAEa,IAAAA,UAAU,EAAE,IAAd;AAAoBI,IAAAA,KAAK,EAAE;AAA3B,GAFhD;AAAA,MAEpBJ,UAFoB,QAEpBA,UAFoB;AAAA,MAEDD,KAFC,QAERK,KAFQ;;AAI5B,SAAO;AACHjB,IAAAA,iBAAiB,EAAjBA,iBADG;AAEHY,IAAAA,KAAK,EAALA,KAFG;AAGHC,IAAAA,UAAU,EAAVA;AAHG,GAAP;AAKH;;AAED,eAAe3B,OAAO,CAAC6B,eAAD,CAAP,CAAyBtB,GAAzB,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport {\n    selectSubreddit,\n    selectSort,\n    fetchPostsIfNeeded,\n    invalidateSubreddit\n} from '../actions/actions'\n\nimport Header from '../components/Header'\nimport Posts from '../containers/Posts'\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n\n        this.handleMenuChange = this.handleMenuChange.bind(this)\n        this.state ={\n          selected: '/best',\n        }\n    }\n\n    componentDidMount() {\n        const { dispatch, selectedSubreddit } = this.props\n        dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n\n    componentDidUpdate(){\n      const { dispatch, selectedSubreddit } = this.props\n      console.log('selected subreddit: '+selectedSubreddit);\n      window.onpopstate  = (e) => {\n        window.location.reload();\n      }\n    }\n\n    handleMenuChange(subreddit,sort) {\n        const sub = subreddit.replace(/ /g, '')\n        this.props.dispatch(selectSubreddit(sub))\n        this.props.dispatch(selectSort(sort))\n        this.props.dispatch(fetchPostsIfNeeded(sub,sort))\n    }\n\n    render() {\n        const { selectedSubreddit, posts, isFetching } = this.props\n\n        return (\n            <div>\n                <Header selectedSub={selectedSubreddit}\n                    handleMenuChange={this.handleMenuChange}\n                    />\n                {posts.length > 0 &&\n                    <Posts posts={posts} />\n                }\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    const { selectedSubreddit, postsBySubreddit } = state\n    const { isFetching, items: posts } = postsBySubreddit[selectedSubreddit] || { isFetching: true, items: [] }\n\n    return {\n        selectedSubreddit,\n        posts,\n        isFetching\n    }\n}\n\nexport default connect(mapStateToProps)(App)\n"]},"metadata":{},"sourceType":"module"}