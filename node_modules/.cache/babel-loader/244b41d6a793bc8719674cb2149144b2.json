{"ast":null,"code":"import { SELECT_SUBREDDIT, SELECT_SORT, INVALIDATE_SUBREDDIT, REQUEST_POSTS, RECEIVE_POSTS, SEARCH_POSTS } from '../constants'; // Import fetch API in case of browser compatiblity issues\n\nimport fetch from 'cross-fetch'; // Action creators for all functionality\n// Basically wraps up type and subreddit selected into an object\n\nexport var selectSubreddit = function selectSubreddit(subreddit) {\n  return {\n    type: SELECT_SUBREDDIT,\n    subreddit: subreddit\n  };\n};\nexport var selectSort = function selectSort(sort) {\n  return {\n    type: SELECT_SORT,\n    sort: sort\n  };\n};\nexport var invalidateSubreddit = function invalidateSubreddit(subreddit) {\n  return {\n    type: INVALIDATE_SUBREDDIT,\n    subreddit: subreddit\n  };\n};\n\nvar requestPosts = function requestPosts(subreddit, sort) {\n  return {\n    type: REQUEST_POSTS,\n    subreddit: subreddit,\n    sort: sort\n  };\n};\n\nvar recievePosts = function recievePosts(subreddit, sort, json) {\n  return {\n    type: RECEIVE_POSTS,\n    subreddit: subreddit,\n    sort: sort,\n    posts: json.data.children.map(function (child) {\n      return child.data;\n    }),\n    recievedAt: Date.now()\n  };\n};\n\nvar recieveSearchPosts = function recieveSearchPosts(term, json) {\n  return {\n    type: SEARCH_POSTS,\n    term: term,\n    posts: json.data.children.map(function (child) {\n      return child.data;\n    }),\n    recievedAt: Date.now()\n  };\n}; // Helper function to fetch JSON data from Reddit API\n\n\nvar fetchPosts = function fetchPosts(subreddit, sort) {\n  if (sort == undefined) {\n    var subredditsort = subreddit;\n  } else {\n    var subredditsort = subreddit + sort;\n  }\n\n  return function (dispatch) {\n    // Dispatch requestPosts action just before attempting to fetching data\n    dispatch(requestPosts(subreddit, sort)); // Fetch data and dispatch recievePosts if no errors\n    // Catch shouldn't be used to handle errors as\n\n    return fetch(\"https://www.reddit.com/\".concat(subredditsort, \".json\")).then(function (response) {\n      return response.json();\n    }, function (error) {\n      return console.log('An error occured', error);\n    }).then(function (json) {\n      return dispatch(recievePosts(subreddit, sort, json));\n    });\n  };\n};\n\nexport var searchPosts = function searchPosts(term) {\n  if (term == undefined || \"\") {\n    var term = \"pol\";\n  }\n\n  return function (dispatch) {\n    return fetch(\"https://www.reddit.com/subreddits/search.json?q=\".concat(term)).then(function (response) {\n      return response.json();\n    }, function (error) {\n      return console.log('An error occured', error);\n    }).then(function (json) {\n      return dispatch(recieveSearchPosts(term, json));\n    });\n  };\n};\n\nvar shouldFetchPosts = function shouldFetchPosts(state, subreddit, sort) {\n  if (sort == undefined) {\n    sort = \"best\";\n  } // Get posts by subreddit from state\n\n\n  var posts = state.postsBySubreddit[subreddit + sort]; // Should fetch posts if no posts exists and not fetching already\n  // If posts exists and not fetching then depends on if posts have invalidated\n\n  if (!posts) {\n    return true;\n  } else if (posts.isFetching) {\n    return false;\n  } else {\n    return posts.didInvalidate;\n  }\n};\n\nexport var fetchPostsIfNeeded = function fetchPostsIfNeeded(subreddit, sort) {\n  return function (dispatch, getState) {\n    if (shouldFetchPosts(getState(), subreddit, sort)) {\n      return dispatch(fetchPosts(subreddit, sort));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/joga/Documents/GitHub/reddit-replica/src/actions/actions.js"],"names":["SELECT_SUBREDDIT","SELECT_SORT","INVALIDATE_SUBREDDIT","REQUEST_POSTS","RECEIVE_POSTS","SEARCH_POSTS","fetch","selectSubreddit","subreddit","type","selectSort","sort","invalidateSubreddit","requestPosts","recievePosts","json","posts","data","children","map","child","recievedAt","Date","now","recieveSearchPosts","term","fetchPosts","undefined","subredditsort","dispatch","then","response","error","console","log","searchPosts","shouldFetchPosts","state","postsBySubreddit","isFetching","didInvalidate","fetchPostsIfNeeded","getState"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,WAFJ,EAGIC,oBAHJ,EAIIC,aAJJ,EAKIC,aALJ,EAMIC,YANJ,QAOO,cAPP,C,CASA;;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CAEA;AACA;;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,SAAD;AAAA,SAC3B;AACIC,IAAAA,IAAI,EAAET,gBADV;AAEIQ,IAAAA,SAAS,EAATA;AAFJ,GAD2B;AAAA,CAAxB;AAOP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD;AAAA,SACtB;AACIF,IAAAA,IAAI,EAAER,WADV;AAEIU,IAAAA,IAAI,EAAJA;AAFJ,GADsB;AAAA,CAAnB;AAOP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACJ,SAAD;AAAA,SAC/B;AACIC,IAAAA,IAAI,EAAEP,oBADV;AAEIM,IAAAA,SAAS,EAATA;AAFJ,GAD+B;AAAA,CAA5B;;AAOP,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAACL,SAAD,EAAYG,IAAZ;AAAA,SACjB;AACIF,IAAAA,IAAI,EAAEN,aADV;AAEIK,IAAAA,SAAS,EAATA,SAFJ;AAGIG,IAAAA,IAAI,EAAJA;AAHJ,GADiB;AAAA,CAArB;;AAQA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACN,SAAD,EAAYG,IAAZ,EAAkBI,IAAlB;AAAA,SACjB;AACIN,IAAAA,IAAI,EAAEL,aADV;AAEII,IAAAA,SAAS,EAATA,SAFJ;AAGIG,IAAAA,IAAI,EAAJA,IAHJ;AAIIK,IAAAA,KAAK,EAAED,IAAI,CAACE,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuB,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACH,IAAV;AAAA,KAA5B,CAJX;AAKII,IAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AALhB,GADiB;AAAA,CAArB;;AAUA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD,EAAOV,IAAP;AAAA,SACvB;AACIN,IAAAA,IAAI,EAAEJ,YADV;AAEIoB,IAAAA,IAAI,EAAJA,IAFJ;AAGIT,IAAAA,KAAK,EAAED,IAAI,CAACE,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuB,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACH,IAAV;AAAA,KAA5B,CAHX;AAIII,IAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AAJhB,GADuB;AAAA,CAA3B,C,CASA;;;AACA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAAClB,SAAD,EAAWG,IAAX,EAAoB;AACrC,MAAGA,IAAI,IAAEgB,SAAT,EAAmB;AACjB,QAAIC,aAAa,GAAGpB,SAApB;AACD,GAFD,MAGI;AACF,QAAIoB,aAAa,GAAGpB,SAAS,GAACG,IAA9B;AACD;;AACC,SAAO,UAACkB,QAAD,EAAc;AACjB;AACAA,IAAAA,QAAQ,CAAChB,YAAY,CAACL,SAAD,EAAYG,IAAZ,CAAb,CAAR,CAFiB,CAIjB;AACA;;AAEE,WAAOL,KAAK,kCAA2BsB,aAA3B,WAAL,CACNE,IADM,CAEH,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAAChB,IAAT,EAAJ;AAAA,KAFL,EAGH,UAAAiB,KAAK;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,KAAhC,CAAJ;AAAA,KAHF,EAKNF,IALM,CAMH,UAAAf,IAAI;AAAA,aAAIc,QAAQ,CAACf,YAAY,CAACN,SAAD,EAAYG,IAAZ,EAAkBI,IAAlB,CAAb,CAAZ;AAAA,KAND,CAAP;AAQD,GAfL;AAgBH,CAvBD;;AAyBA,OAAO,IAAMoB,WAAW,GAAG,SAAdA,WAAc,CAACV,IAAD,EAAU;AACjC,MAAGA,IAAI,IAAEE,SAAN,IAAmB,EAAtB,EAAyB;AACvB,QAAIF,IAAI,GAAG,KAAX;AACD;;AAEC,SAAO,UAACI,QAAD,EAAc;AAEf,WAAOvB,KAAK,2DAAoDmB,IAApD,EAAL,CACNK,IADM,CAEH,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAAChB,IAAT,EAAJ;AAAA,KAFL,EAGH,UAAAiB,KAAK;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,KAAhC,CAAJ;AAAA,KAHF,EAKNF,IALM,CAMH,UAAAf,IAAI;AAAA,aAAIc,QAAQ,CAACL,kBAAkB,CAACC,IAAD,EAAOV,IAAP,CAAnB,CAAZ;AAAA,KAND,CAAP;AAQD,GAVL;AAWH,CAhBI;;AAkBP,IAAMqB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAQ7B,SAAR,EAAmBG,IAAnB,EAA4B;AACnD,MAAGA,IAAI,IAAIgB,SAAX,EAAqB;AACnBhB,IAAAA,IAAI,GAAG,MAAP;AACD,GAHkD,CAIjD;;;AACA,MAAMK,KAAK,GAAGqB,KAAK,CAACC,gBAAN,CAAuB9B,SAAS,GAACG,IAAjC,CAAd,CALiD,CAOjD;AACA;;AACA,MAAI,CAACK,KAAL,EAAY;AACR,WAAO,IAAP;AACH,GAFD,MAEO,IAAIA,KAAK,CAACuB,UAAV,EAAsB;AACzB,WAAO,KAAP;AACH,GAFM,MAEA;AACH,WAAOvB,KAAK,CAACwB,aAAb;AACH;AACJ,CAhBD;;AAkBA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACjC,SAAD,EAAWG,IAAX,EAAoB;AAClD,SAAO,UAACkB,QAAD,EAAWa,QAAX,EAAwB;AAC3B,QAAIN,gBAAgB,CAACM,QAAQ,EAAT,EAAalC,SAAb,EAAwBG,IAAxB,CAApB,EAAmD;AAC/C,aAAOkB,QAAQ,CAACH,UAAU,CAAClB,SAAD,EAAWG,IAAX,CAAX,CAAf;AACH;AACJ,GAJD;AAKH,CANM","sourcesContent":["import {\n    SELECT_SUBREDDIT,\n    SELECT_SORT,\n    INVALIDATE_SUBREDDIT,\n    REQUEST_POSTS,\n    RECEIVE_POSTS,\n    SEARCH_POSTS\n} from '../constants'\n\n// Import fetch API in case of browser compatiblity issues\nimport fetch from 'cross-fetch'\n\n// Action creators for all functionality\n// Basically wraps up type and subreddit selected into an object\n\nexport const selectSubreddit = (subreddit) => (\n    {\n        type: SELECT_SUBREDDIT,\n        subreddit\n    }\n)\n\nexport const selectSort = (sort) => (\n    {\n        type: SELECT_SORT,\n        sort\n    }\n)\n\nexport const invalidateSubreddit = (subreddit) => (\n    {\n        type: INVALIDATE_SUBREDDIT,\n        subreddit\n    }\n)\n\nconst requestPosts = (subreddit, sort) => (\n    {\n        type: REQUEST_POSTS,\n        subreddit,\n        sort\n    }\n)\n\nconst recievePosts = (subreddit, sort, json) => (\n    {\n        type: RECEIVE_POSTS,\n        subreddit,\n        sort,\n        posts: json.data.children.map(child => child.data),\n        recievedAt: Date.now()\n    }\n)\n\nconst recieveSearchPosts = (term, json) => (\n    {\n        type: SEARCH_POSTS,\n        term,\n        posts: json.data.children.map(child => child.data),\n        recievedAt: Date.now()\n    }\n)\n\n// Helper function to fetch JSON data from Reddit API\nconst fetchPosts = (subreddit,sort) => {\n  if(sort==undefined){\n    var subredditsort = subreddit;\n  }\n  else{\n    var subredditsort = subreddit+sort;\n  }\n    return (dispatch) => {\n        // Dispatch requestPosts action just before attempting to fetching data\n        dispatch(requestPosts(subreddit, sort))\n\n        // Fetch data and dispatch recievePosts if no errors\n        // Catch shouldn't be used to handle errors as\n\n          return fetch(`https://www.reddit.com/${subredditsort}.json`)\n          .then(\n              response => response.json(),\n              error => console.log('An error occured', error)\n          )\n          .then(\n              json => dispatch(recievePosts(subreddit, sort, json))\n          )\n        }\n}\n\nexport const searchPosts = (term) => {\n    if(term==undefined || \"\"){\n      var term = \"pol\";\n    }\n\n      return (dispatch) => {\n\n            return fetch(`https://www.reddit.com/subreddits/search.json?q=${term}`)\n            .then(\n                response => response.json(),\n                error => console.log('An error occured', error)\n            )\n            .then(\n                json => dispatch(recieveSearchPosts(term, json))\n            )\n          }\n  }\n\nconst shouldFetchPosts = (state, subreddit, sort) => {\n  if(sort == undefined){\n    sort = \"best\";\n  }\n    // Get posts by subreddit from state\n    const posts = state.postsBySubreddit[subreddit+sort]\n\n    // Should fetch posts if no posts exists and not fetching already\n    // If posts exists and not fetching then depends on if posts have invalidated\n    if (!posts) {\n        return true\n    } else if (posts.isFetching) {\n        return false\n    } else {\n        return posts.didInvalidate\n    }\n}\n\nexport const fetchPostsIfNeeded = (subreddit,sort) => {\n    return (dispatch, getState) => {\n        if (shouldFetchPosts(getState(), subreddit, sort)) {\n            return dispatch(fetchPosts(subreddit,sort))\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}