{"ast":null,"code":"import _classCallCheck from \"/Users/joga/Documents/GitHub/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/joga/Documents/GitHub/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/joga/Documents/GitHub/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/joga/Documents/GitHub/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/joga/Documents/GitHub/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/joga/Documents/GitHub/reddit-replica/src/components/Post.js\";\nimport React from 'react';\nimport { Card, Image } from 'semantic-ui-react';\nimport Remarkable from 'remarkable';\nimport '../styles/Post.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport ReactTooltip from 'react-tooltip';\nimport PostModal from './PostModal.js';\n\nvar Post =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Post, _React$Component);\n\n  function Post(props) {\n    var _this;\n\n    _classCallCheck(this, Post);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Post).call(this, props));\n    _this.state = {\n      modalShow: false\n    };\n    return _this;\n  }\n\n  _createClass(Post, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var modalClose = function modalClose() {\n        return _this2.setState({\n          modalShow: false\n        });\n      };\n\n      var _this$props = this.props,\n          url = _this$props.url,\n          title = _this$props.title,\n          author = _this$props.author,\n          selftext = _this$props.selftext,\n          description = _this$props.description,\n          thumbnail = _this$props.thumbnail,\n          subreddit_name_prefixed = _this$props.subreddit_name_prefixed;\n      var notImage = ['self', 'default'];\n      return React.createElement(\"div\", {\n        className: \"main-card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"card-border\",\n        className: \"card-border\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"open-modal\",\n        \"data-tip\": \"Open Post\",\n        onClick: function onClick() {\n          return _this2.setState({\n            modalShow: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \" \", React.createElement(\"i\", {\n        className: \"fa fa-cog fa-spin\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }), \" \"), React.createElement(ReactTooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }), !notImage.includes(thumbnail) && React.createElement(Image, {\n        floated: \"right\",\n        src: thumbnail,\n        rounded: true,\n        bordered: true,\n        size: \"tiny\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"author\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Posted by \", author, \" in \", subreddit_name_prefixed), React.createElement(\"div\", {\n        className: \"post-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, title), React.createElement(\"div\", {\n        className: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \" \", description, \" \"), React.createElement(\"a\", {\n        href: url,\n        className: \"external-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-external-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }), \" \", url)), React.createElement(PostModal, {\n        show: this.state.modalShow,\n        onHide: modalClose,\n        subreddit: subreddit_name_prefixed,\n        url: url,\n        title: title,\n        author: author,\n        selftext: selftext,\n        thumbnail: thumbnail,\n        description: description,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Post;\n}(React.Component);\n\nexport { Post as default };","map":{"version":3,"sources":["/Users/joga/Documents/GitHub/reddit-replica/src/components/Post.js"],"names":["React","Card","Image","Remarkable","ReactTooltip","PostModal","Post","props","state","modalShow","modalClose","setState","url","title","author","selftext","description","thumbnail","subreddit_name_prefixed","notImage","includes","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Card, Image } from 'semantic-ui-react'\nimport Remarkable from 'remarkable'\nimport '../styles/Post.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport ReactTooltip from 'react-tooltip';\nimport PostModal from './PostModal.js'\n\nexport default class Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { modalShow: false };\n\n  }\n\n  render() {\n    let modalClose = () => this.setState({ modalShow: false });\n    const { url, title, author, selftext, description, thumbnail, subreddit_name_prefixed } = this.props\n    const notImage = [ 'self', 'default' ]\n    return (\n      <div className=\"main-card\" >\n          <div id=\"card-border\" className=\"card-border\" >\n              <button className=\"open-modal\" data-tip=\"Open Post\" onClick={() => this.setState({ modalShow: true })}> <i className=\"fa fa-cog fa-spin\"></i> </button><ReactTooltip />\n              { !notImage.includes(thumbnail) && <Image floated='right' src={thumbnail} rounded bordered size=\"tiny\" />}\n              <div className=\"author\">Posted by {author} in {subreddit_name_prefixed}</div>\n              <div className=\"post-text\" >{title}</div>\n              <div className=\"description\"> {description} </div>\n              <a href={url} className=\"external-link\"><i className=\"fa fa-external-link\"></i> {url}</a>\n          </div>\n          <PostModal\n            show={this.state.modalShow}\n            onHide={modalClose}\n            subreddit = {subreddit_name_prefixed}\n            url={url}\n            title={title}\n            author={author}\n            selftext={selftext}\n            thumbnail = {thumbnail}\n            description = {description}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}