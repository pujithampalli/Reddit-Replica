{"ast":null,"code":"import _defineProperty from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { SELECT_SUBREDDIT, SELECT_SORT, INVALIDATE_SUBREDDIT, REQUEST_POSTS, RECEIVE_POSTS } from './constants';\nimport { combineReducers } from 'redux'; // Reducer handling the currently selected subreddit\n\nvar selectedSubreddit = function selectedSubreddit() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'best';\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SELECT_SUBREDDIT:\n      return action.subreddit;\n\n    default:\n      return state;\n  }\n};\n\nvar selectedSort = function selectedSort() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'best';\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SELECT_SORT:\n      return action.sort;\n\n    default:\n      return state;\n  }\n}; // Helper function for handling posts\n\n\nvar posts = function posts() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n      return _objectSpread({}, state, {\n        didInvalidate: true\n      });\n\n    case REQUEST_POSTS:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        didInvalidate: false\n      });\n\n    case RECEIVE_POSTS:\n      return _objectSpread({}, state, {\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      });\n\n    default:\n      return state;\n  }\n}; // Reducer handling posts by subreddit\n\n\nvar postsBySubreddit = function postsBySubreddit() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return _objectSpread({}, state, _defineProperty({}, action.subreddit, posts(state[action.subreddit], action)));\n\n    default:\n      return state;\n  }\n}; // Combine reducers\n\n\nvar rootReducer = combineReducers({\n  postsBySubreddit: postsBySubreddit,\n  selectedSubreddit: selectedSubreddit\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/joga/Documents/Pooja/reddit-replica/src/reducers.js"],"names":["SELECT_SUBREDDIT","SELECT_SORT","INVALIDATE_SUBREDDIT","REQUEST_POSTS","RECEIVE_POSTS","combineReducers","selectedSubreddit","state","action","type","subreddit","selectedSort","sort","posts","isFetching","didInvalidate","items","lastUpdated","receivedAt","postsBySubreddit","rootReducer"],"mappings":";;AAAA,SACIA,gBADJ,EAEIC,WAFJ,EAGIC,oBAHJ,EAIIC,aAJJ,EAKIC,aALJ,QAMO,aANP;AAQA,SAASC,eAAT,QAAgC,OAAhC,C,CAEA;;AACA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAA4B;AAAA,MAA3BC,KAA2B,uEAAnB,MAAmB;AAAA,MAAXC,MAAW;;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,gBAAL;AACI,aAAOQ,MAAM,CAACE,SAAd;;AACJ;AACI,aAAOH,KAAP;AAJR;AAMH,CAPD;;AASA,IAAMI,YAAY,GAAG,SAAfA,YAAe,GAA4B;AAAA,MAA3BJ,KAA2B,uEAAnB,MAAmB;AAAA,MAAXC,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,WAAL;AACI,aAAOO,MAAM,CAACI,IAAd;;AACJ;AACI,aAAOL,KAAP;AAJR;AAMH,CAPD,C,CASA;;;AACA,IAAMM,KAAK,GAAG,SAARA,KAAQ,GAOT;AAAA,MANDN,KAMC,uEANO;AACJO,IAAAA,UAAU,EAAE,KADR;AAEJC,IAAAA,aAAa,EAAE,KAFX;AAGJC,IAAAA,KAAK,EAAE;AAHH,GAMP;AAAA,MADDR,MACC;;AACD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,oBAAL;AACI,+BAAYK,KAAZ;AACIQ,QAAAA,aAAa,EAAE;AADnB;;AAGJ,SAAKZ,aAAL;AACI,+BAAYI,KAAZ;AACIO,QAAAA,UAAU,EAAE,IADhB;AAEIC,QAAAA,aAAa,EAAE;AAFnB;;AAIJ,SAAKX,aAAL;AACI,+BAAYG,KAAZ;AACIO,QAAAA,UAAU,EAAE,KADhB;AAEIC,QAAAA,aAAa,EAAE,KAFnB;AAGIC,QAAAA,KAAK,EAAER,MAAM,CAACK,KAHlB;AAIII,QAAAA,WAAW,EAAET,MAAM,CAACU;AAJxB;;AAMJ;AACI,aAAOX,KAAP;AAlBR;AAqBH,CA7BD,C,CA+BA;;;AACA,IAAMY,gBAAgB,GAAG,SAAnBA,gBAAmB,GAGpB;AAAA,MAFDZ,KAEC,uEAFO,EAEP;AAAA,MADDC,MACC;;AACD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,oBAAL;AACA,SAAKE,aAAL;AACA,SAAKD,aAAL;AACI,+BAAYI,KAAZ,sBACKC,MAAM,CAACE,SADZ,EACwBG,KAAK,CAACN,KAAK,CAACC,MAAM,CAACE,SAAR,CAAN,EAA0BF,MAA1B,CAD7B;;AAGJ;AACI,aAAOD,KAAP;AARR;AAUH,CAdD,C,CAgBA;;;AACA,IAAMa,WAAW,GAAGf,eAAe,CAAC;AAChCc,EAAAA,gBAAgB,EAAhBA,gBADgC;AAEhCb,EAAAA,iBAAiB,EAAjBA;AAFgC,CAAD,CAAnC;AAKA,eAAec,WAAf","sourcesContent":["import {\n    SELECT_SUBREDDIT,\n    SELECT_SORT,\n    INVALIDATE_SUBREDDIT,\n    REQUEST_POSTS,\n    RECEIVE_POSTS\n} from './constants'\n\nimport { combineReducers } from 'redux'\n\n// Reducer handling the currently selected subreddit\nconst selectedSubreddit = (state = 'best', action) => {\n    switch (action.type) {\n        case SELECT_SUBREDDIT:\n            return action.subreddit\n        default:\n            return state\n    }\n}\n\nconst selectedSort = (state = 'best', action) => {\n    switch (action.type) {\n        case SELECT_SORT:\n            return action.sort\n        default:\n            return state\n    }\n}\n\n// Helper function for handling posts\nconst posts = (\n    state = {\n        isFetching: false,\n        didInvalidate: false,\n        items: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case INVALIDATE_SUBREDDIT:\n            return { ...state,\n                didInvalidate: true\n            }\n        case REQUEST_POSTS:\n            return { ...state,\n                isFetching: true,\n                didInvalidate: false\n            }\n        case RECEIVE_POSTS:\n            return { ...state,\n                isFetching: false,\n                didInvalidate: false,\n                items: action.posts,\n                lastUpdated: action.receivedAt\n            }\n        default:\n            return state\n\n    }\n}\n\n// Reducer handling posts by subreddit\nconst postsBySubreddit = (\n    state = {},\n    action\n) => {\n    switch(action.type) {\n        case INVALIDATE_SUBREDDIT:\n        case RECEIVE_POSTS:\n        case REQUEST_POSTS:\n            return { ...state,\n                [action.subreddit]: posts(state[action.subreddit], action)\n            }\n        default:\n            return state\n    }\n}\n\n// Combine reducers\nconst rootReducer = combineReducers({\n    postsBySubreddit,\n    selectedSubreddit\n})\n\nexport default rootReducer\n"]},"metadata":{},"sourceType":"module"}