{"ast":null,"code":"import _classCallCheck from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/joga/Documents/Pooja/reddit-replica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/joga/Documents/Pooja/reddit-replica/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // Import actions\n\nimport { selectSubreddit, fetchPostsIfNeeded, invalidateSubreddit } from '../actions/actions'; // Import components\n\nimport Header from '../components/Header';\nimport Posts from '../containers/Posts';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); //this.handleMenuChange = this.handleMenuChange.bind(this)\n\n    _this.handleRefreshClick = _this.handleRefreshClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          dispatch = _this$props.dispatch,\n          selectedSubreddit = _this$props.selectedSubreddit;\n      dispatch(fetchPostsIfNeeded(selectedSubreddit));\n    }\n  }, {\n    key: \"handleMenuChange\",\n    value: function handleMenuChange(subreddit) {\n      console.log(\"This is subb name: \" + subreddit);\n      var sub = subreddit.replace(/ /g, '');\n      this.props.dispatch(selectSubreddit(sub));\n      this.props.dispatch(fetchPostsIfNeeded(sub));\n    }\n  }, {\n    key: \"handleRefreshClick\",\n    value: function handleRefreshClick() {\n      var _this$props2 = this.props,\n          dispatch = _this$props2.dispatch,\n          selectedSubreddit = _this$props2.selectedSubreddit;\n      dispatch(invalidateSubreddit(selectedSubreddit));\n      dispatch(fetchPostsIfNeeded(selectedSubreddit));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          selectedSubreddit = _this$props3.selectedSubreddit,\n          posts = _this$props3.posts,\n          isFetching = _this$props3.isFetching;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Header, {\n        selectedSub: selectedSubreddit,\n        handleMenuChange: this.handleMenuChange,\n        handleRefreshClick: this.handleRefreshClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), posts.length > 0 && React.createElement(Posts, {\n        posts: posts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nfunction mapStateToProps(state) {\n  var selectedSubreddit = state.selectedSubreddit,\n      postsBySubreddit = state.postsBySubreddit;\n\n  var _ref = postsBySubreddit[selectedSubreddit] || {\n    isFetching: true,\n    items: []\n  },\n      isFetching = _ref.isFetching,\n      posts = _ref.items;\n\n  return {\n    selectedSubreddit: selectedSubreddit,\n    posts: posts,\n    isFetching: isFetching\n  };\n}\n\nexport default connect(mapStateToProps)(App);","map":{"version":3,"sources":["/Users/joga/Documents/Pooja/reddit-replica/src/containers/App.js"],"names":["React","Component","connect","selectSubreddit","fetchPostsIfNeeded","invalidateSubreddit","Header","Posts","App","props","handleRefreshClick","bind","dispatch","selectedSubreddit","subreddit","console","log","sub","replace","posts","isFetching","handleMenuChange","length","mapStateToProps","state","postsBySubreddit","items"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AACA,SACIC,eADJ,EAEIC,kBAFJ,EAGIC,mBAHJ,QAIO,oBAJP,C,CAMA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;IAGMC,G;;;;;AACF,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN,GADe,CAGf;;AACA,UAAKC,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBC,IAAxB,uDAA1B;AAJe;AAKlB;;;;wCAEmB;AAAA,wBACwB,KAAKF,KAD7B;AAAA,UACRG,QADQ,eACRA,QADQ;AAAA,UACEC,iBADF,eACEA,iBADF;AAEhBD,MAAAA,QAAQ,CAACR,kBAAkB,CAACS,iBAAD,CAAnB,CAAR;AACH;;;qCAEgBC,S,EAAW;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAsBF,SAAlC;AACE,UAAMG,GAAG,GAAGH,SAAS,CAACI,OAAV,CAAkB,IAAlB,EAAwB,EAAxB,CAAZ;AACA,WAAKT,KAAL,CAAWG,QAAX,CAAoBT,eAAe,CAACc,GAAD,CAAnC;AACA,WAAKR,KAAL,CAAWG,QAAX,CAAoBR,kBAAkB,CAACa,GAAD,CAAtC;AACH;;;yCAEoB;AAAA,yBACuB,KAAKR,KAD5B;AAAA,UACTG,QADS,gBACTA,QADS;AAAA,UACCC,iBADD,gBACCA,iBADD;AAEjBD,MAAAA,QAAQ,CAACP,mBAAmB,CAACQ,iBAAD,CAApB,CAAR;AACAD,MAAAA,QAAQ,CAACR,kBAAkB,CAACS,iBAAD,CAAnB,CAAR;AACH;;;6BAEQ;AAAA,yBAC4C,KAAKJ,KADjD;AAAA,UACGI,iBADH,gBACGA,iBADH;AAAA,UACsBM,KADtB,gBACsBA,KADtB;AAAA,UAC6BC,UAD7B,gBAC6BA,UAD7B;AAGL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,WAAW,EAAEP,iBAArB;AACI,QAAA,gBAAgB,EAAE,KAAKQ,gBAD3B;AAEI,QAAA,kBAAkB,EAAE,KAAKX,kBAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAKKS,KAAK,CAACG,MAAN,GAAe,CAAf,IACG,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEH,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANR,CADJ;AAWH;;;;EAxCalB,S;;AA2ClB,SAASsB,eAAT,CAAyBC,KAAzB,EAAgC;AAAA,MACpBX,iBADoB,GACoBW,KADpB,CACpBX,iBADoB;AAAA,MACDY,gBADC,GACoBD,KADpB,CACDC,gBADC;;AAAA,aAESA,gBAAgB,CAACZ,iBAAD,CAAhB,IAAuC;AAAEO,IAAAA,UAAU,EAAE,IAAd;AAAoBM,IAAAA,KAAK,EAAE;AAA3B,GAFhD;AAAA,MAEpBN,UAFoB,QAEpBA,UAFoB;AAAA,MAEDD,KAFC,QAERO,KAFQ;;AAI5B,SAAO;AACHb,IAAAA,iBAAiB,EAAjBA,iBADG;AAEHM,IAAAA,KAAK,EAALA,KAFG;AAGHC,IAAAA,UAAU,EAAVA;AAHG,GAAP;AAKH;;AAED,eAAelB,OAAO,CAACqB,eAAD,CAAP,CAAyBf,GAAzB,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\n// Import actions\nimport {\n    selectSubreddit,\n    fetchPostsIfNeeded,\n    invalidateSubreddit\n} from '../actions/actions'\n\n// Import components\nimport Header from '../components/Header'\nimport Posts from '../containers/Posts'\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n\n        //this.handleMenuChange = this.handleMenuChange.bind(this)\n        this.handleRefreshClick = this.handleRefreshClick.bind(this)\n    }\n\n    componentDidMount() {\n        const { dispatch, selectedSubreddit } = this.props\n        dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n\n    handleMenuChange(subreddit) {\n      console.log(\"This is subb name: \"+subreddit);\n        const sub = subreddit.replace(/ /g, '')\n        this.props.dispatch(selectSubreddit(sub))\n        this.props.dispatch(fetchPostsIfNeeded(sub))\n    }\n\n    handleRefreshClick() {\n        const { dispatch, selectedSubreddit } = this.props\n        dispatch(invalidateSubreddit(selectedSubreddit))\n        dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n\n    render() {\n        const { selectedSubreddit, posts, isFetching } = this.props\n\n        return (\n            <div>\n                <Header selectedSub={selectedSubreddit}\n                    handleMenuChange={this.handleMenuChange}\n                    handleRefreshClick={this.handleRefreshClick}\n                    />\n                {posts.length > 0 &&\n                    <Posts posts={posts} />\n                }\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    const { selectedSubreddit, postsBySubreddit } = state\n    const { isFetching, items: posts } = postsBySubreddit[selectedSubreddit] || { isFetching: true, items: [] }\n\n    return {\n        selectedSubreddit,\n        posts,\n        isFetching\n    }\n}\n\nexport default connect(mapStateToProps)(App)\n"]},"metadata":{},"sourceType":"module"}