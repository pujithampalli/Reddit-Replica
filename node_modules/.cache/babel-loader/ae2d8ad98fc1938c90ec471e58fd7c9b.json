{"ast":null,"code":"import { SELECT_SUBREDDIT, SELECT_SORT, INVALIDATE_SUBREDDIT, REQUEST_POSTS, RECEIVE_POSTS } from '../constants'; // Import fetch API in case of browser compatiblity issues\n\nimport fetch from 'cross-fetch'; // Action creators for all functionality\n// Basically wraps up type and subreddit selected into an object\n\nexport var selectSubreddit = function selectSubreddit(subreddit) {\n  return {\n    type: SELECT_SUBREDDIT,\n    subreddit: subreddit\n  };\n};\nexport var selectSort = function selectSort(sort) {\n  return {\n    type: SELECT_SORT,\n    sort: sort\n  };\n};\nexport var invalidateSubreddit = function invalidateSubreddit(subreddit) {\n  return {\n    type: INVALIDATE_SUBREDDIT,\n    subreddit: subreddit\n  };\n};\n\nvar requestPosts = function requestPosts(subreddit) {\n  return {\n    type: REQUEST_POSTS,\n    subreddit: subreddit\n  };\n};\n\nvar recievePosts = function recievePosts(subreddit, json) {\n  return {\n    type: RECEIVE_POSTS,\n    subreddit: subreddit,\n    posts: json.data.children.map(function (child) {\n      return child.data;\n    }),\n    recievedAt: Date.now()\n  };\n}; // Helper function to fetch JSON data from Reddit API\n\n\nvar fetchPosts = function fetchPosts(subreddit, sort) {\n  if (sort == undefined) {\n    subredditsort = subreddit;\n  } else {\n    subredditsort = subreddit + sort;\n  }\n\n  return function (dispatch) {\n    // Dispatch requestPosts action just before attempting to fetching data\n    dispatch(requestPosts(subredditsort)); // Fetch data and dispatch recievePosts if no errors\n    // Catch shouldn't be used to handle errors as\n\n    return fetch(\"https://www.reddit.com/\".concat(subredditsort, \".json\")).then(function (response) {\n      return response.json();\n    }, function (error) {\n      return console.log('An error occured', error);\n    }).then(function (json) {\n      return dispatch(recievePosts(subredditsort, json));\n    });\n  };\n};\n\nvar shouldFetchPosts = function shouldFetchPosts(state, subreddit) {\n  // Get posts by subreddit from state\n  var posts = state.postsBySubreddit[subreddit]; // Should fetch posts if no posts exists and not fetching already\n  // If posts exists and not fetching then depends on if posts have invalidated\n\n  if (!posts) {\n    return true;\n  } else if (posts.isFetching) {\n    return false;\n  } else {\n    return posts.didInvalidate;\n  }\n};\n\nexport var fetchPostsIfNeeded = function fetchPostsIfNeeded(subreddit, sort) {\n  return function (dispatch, getState) {\n    if (shouldFetchPosts(getState(), subreddit)) {\n      return dispatch(fetchPosts(subreddit, sort));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/joga/Documents/Pooja/reddit-replica/src/actions/actions.js"],"names":["SELECT_SUBREDDIT","SELECT_SORT","INVALIDATE_SUBREDDIT","REQUEST_POSTS","RECEIVE_POSTS","fetch","selectSubreddit","subreddit","type","selectSort","sort","invalidateSubreddit","requestPosts","recievePosts","json","posts","data","children","map","child","recievedAt","Date","now","fetchPosts","undefined","subredditsort","dispatch","then","response","error","console","log","shouldFetchPosts","state","postsBySubreddit","isFetching","didInvalidate","fetchPostsIfNeeded","getState"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,WAFJ,EAGIC,oBAHJ,EAIIC,aAJJ,EAKIC,aALJ,QAMO,cANP,C,CAQA;;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CAEA;AACA;;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,SAAD;AAAA,SAC3B;AACIC,IAAAA,IAAI,EAAER,gBADV;AAEIO,IAAAA,SAAS,EAATA;AAFJ,GAD2B;AAAA,CAAxB;AAOP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD;AAAA,SACtB;AACIF,IAAAA,IAAI,EAAEP,WADV;AAEIS,IAAAA,IAAI,EAAJA;AAFJ,GADsB;AAAA,CAAnB;AAOP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACJ,SAAD;AAAA,SAC/B;AACIC,IAAAA,IAAI,EAAEN,oBADV;AAEIK,IAAAA,SAAS,EAATA;AAFJ,GAD+B;AAAA,CAA5B;;AAOP,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAACL,SAAD;AAAA,SACjB;AACIC,IAAAA,IAAI,EAAEL,aADV;AAEII,IAAAA,SAAS,EAATA;AAFJ,GADiB;AAAA,CAArB;;AAOA,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAACN,SAAD,EAAYO,IAAZ;AAAA,SACjB;AACIN,IAAAA,IAAI,EAAEJ,aADV;AAEIG,IAAAA,SAAS,EAATA,SAFJ;AAGIQ,IAAAA,KAAK,EAAED,IAAI,CAACE,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuB,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACH,IAAV;AAAA,KAA5B,CAHX;AAIII,IAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AAJhB,GADiB;AAAA,CAArB,C,CASA;;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAChB,SAAD,EAAWG,IAAX,EAAoB;AACrC,MAAGA,IAAI,IAAEc,SAAT,EAAmB;AACjBC,IAAAA,aAAa,GAAGlB,SAAhB;AACD,GAFD,MAGI;AACFkB,IAAAA,aAAa,GAAGlB,SAAS,GAACG,IAA1B;AACD;;AACC,SAAO,UAACgB,QAAD,EAAc;AACjB;AACAA,IAAAA,QAAQ,CAACd,YAAY,CAACa,aAAD,CAAb,CAAR,CAFiB,CAIjB;AACA;;AAEE,WAAOpB,KAAK,kCAA2BoB,aAA3B,WAAL,CACNE,IADM,CAEH,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACd,IAAT,EAAJ;AAAA,KAFL,EAGH,UAAAe,KAAK;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,KAAhC,CAAJ;AAAA,KAHF,EAKNF,IALM,CAMH,UAAAb,IAAI;AAAA,aAAIY,QAAQ,CAACb,YAAY,CAACY,aAAD,EAAgBX,IAAhB,CAAb,CAAZ;AAAA,KAND,CAAP;AAQD,GAfL;AAgBH,CAvBD;;AAyBA,IAAMkB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAQ1B,SAAR,EAAsB;AAC3C;AACA,MAAMQ,KAAK,GAAGkB,KAAK,CAACC,gBAAN,CAAuB3B,SAAvB,CAAd,CAF2C,CAI3C;AACA;;AACA,MAAI,CAACQ,KAAL,EAAY;AACR,WAAO,IAAP;AACH,GAFD,MAEO,IAAIA,KAAK,CAACoB,UAAV,EAAsB;AACzB,WAAO,KAAP;AACH,GAFM,MAEA;AACH,WAAOpB,KAAK,CAACqB,aAAb;AACH;AACJ,CAbD;;AAeA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAC9B,SAAD,EAAWG,IAAX,EAAoB;AAClD,SAAO,UAACgB,QAAD,EAAWY,QAAX,EAAwB;AAC3B,QAAIN,gBAAgB,CAACM,QAAQ,EAAT,EAAa/B,SAAb,CAApB,EAA6C;AACzC,aAAOmB,QAAQ,CAACH,UAAU,CAAChB,SAAD,EAAWG,IAAX,CAAX,CAAf;AACH;AACJ,GAJD;AAKH,CANM","sourcesContent":["import {\n    SELECT_SUBREDDIT,\n    SELECT_SORT,\n    INVALIDATE_SUBREDDIT,\n    REQUEST_POSTS,\n    RECEIVE_POSTS\n} from '../constants'\n\n// Import fetch API in case of browser compatiblity issues\nimport fetch from 'cross-fetch'\n\n// Action creators for all functionality\n// Basically wraps up type and subreddit selected into an object\n\nexport const selectSubreddit = (subreddit) => (\n    {\n        type: SELECT_SUBREDDIT,\n        subreddit\n    }\n)\n\nexport const selectSort = (sort) => (\n    {\n        type: SELECT_SORT,\n        sort\n    }\n)\n\nexport const invalidateSubreddit = (subreddit) => (\n    {\n        type: INVALIDATE_SUBREDDIT,\n        subreddit\n    }\n)\n\nconst requestPosts = (subreddit) => (\n    {\n        type: REQUEST_POSTS,\n        subreddit\n    }\n)\n\nconst recievePosts = (subreddit, json) => (\n    {\n        type: RECEIVE_POSTS,\n        subreddit,\n        posts: json.data.children.map(child => child.data),\n        recievedAt: Date.now()\n    }\n)\n\n// Helper function to fetch JSON data from Reddit API\nconst fetchPosts = (subreddit,sort) => {\n  if(sort==undefined){\n    subredditsort = subreddit;\n  }\n  else{\n    subredditsort = subreddit+sort;\n  }\n    return (dispatch) => {\n        // Dispatch requestPosts action just before attempting to fetching data\n        dispatch(requestPosts(subredditsort))\n\n        // Fetch data and dispatch recievePosts if no errors\n        // Catch shouldn't be used to handle errors as\n\n          return fetch(`https://www.reddit.com/${subredditsort}.json`)\n          .then(\n              response => response.json(),\n              error => console.log('An error occured', error)\n          )\n          .then(\n              json => dispatch(recievePosts(subredditsort, json))\n          )\n        }\n}\n\nconst shouldFetchPosts = (state, subreddit) => {\n    // Get posts by subreddit from state\n    const posts = state.postsBySubreddit[subreddit]\n\n    // Should fetch posts if no posts exists and not fetching already\n    // If posts exists and not fetching then depends on if posts have invalidated\n    if (!posts) {\n        return true\n    } else if (posts.isFetching) {\n        return false\n    } else {\n        return posts.didInvalidate\n    }\n}\n\nexport const fetchPostsIfNeeded = (subreddit,sort) => {\n    return (dispatch, getState) => {\n        if (shouldFetchPosts(getState(), subreddit)) {\n            return dispatch(fetchPosts(subreddit,sort))\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}